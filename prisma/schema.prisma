generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DELIVERER
  RECIPIENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum VehicleType {
  CAR
  MOTORCYCLE
  TRUCK
  BIKE
}

enum OrderStatus {
  PREPARING
  AWAITING_PICKUP
  IN_TRANSIT
  DELIVERED
  RETURNED
}

model Deliverer {
  id              String     @id @default(uuid())
  name            String
  email           String     @unique
  password        String
  cpf             String     @unique
  phone           String
  rating          Int        @default(5)
  deliveriesCount Int        @default(0) @map("deliveries_count")
  latitude        Float
  longitude       Float
  isAvailable     Boolean    @default(true) @map("is_available")
  status          UserStatus @default(ACTIVE)
  role            Role       @default(DELIVERER)
  vehicle         Vehicle[]
  orders          Order[]

  registeredAt     DateTime          @default(now()) @map("registered_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  orderAttachments OrderAttachment[]

  @@map("deliverers")
}

model DelivererToken {
  id          String   @id @default(uuid())
  delivererId String   @map("deliverer_id")
  token       String
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("deliverer_tokens")
}

model Recipient {
  id       String @id @default(uuid())
  name     String
  email    String
  phone    String
  address  String
  password String
  city     String
  state    String
  zip      String
  country  String
  role     Role   @default(RECIPIENT)

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  lastOrderAt DateTime? @map("last_order_at")

  orders Order[]

  @@map("recipients")
}

model RecipientToken {
  id          String   @id @default(uuid())
  recipientId String   @map("recipient_id")
  token       String
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("recipient_tokens")
}

model Admin {
  id       String @id @default(uuid())
  cpf      String @unique
  name     String
  email    String @unique
  password String
  phone    String
  role     Role   @default(ADMIN)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

model Vehicle {
  id       String      @id @default(uuid())
  plate    String
  model    String
  year     Int
  color    String
  capacity Int
  mileage  Int
  type     VehicleType

  delivererId String    @map("deliverer_id")
  deliverer   Deliverer @relation(fields: [delivererId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("vehicles")
}

model Order {
  id              String      @id @default(uuid())
  status          OrderStatus @default(PREPARING)
  pickupCode      String      @unique @map("pickup_code")
  deliveryAddress String      @map("delivery_address")
  latitude        Float
  longitude       Float
  trackingCode    String?     @unique @map("tracking_code")
  notes           String?
  pickedAt        DateTime?   @map("picked_at")
  deliveredAt     DateTime?   @map("delivered_at")
  returnedAt      DateTime?   @map("returned_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  createdAt       DateTime    @default(now()) @map("created_at")

  delivererId String?    @map("deliverer_id")
  deliverer   Deliverer? @relation(fields: [delivererId], references: [id])

  recipientId      String            @map("recipient_id")
  recipient        Recipient         @relation(fields: [recipientId], references: [id])
  orderAttachments OrderAttachment[]
}

model OrderAttachment {
  id    String @id @default(uuid())
  url   String
  title String
  type  String

  orderId String @map("order_id")
  order   Order  @relation(fields: [orderId], references: [id])

  delivererId String     @map("deliverer_id")
  deliverer   Deliverer? @relation(fields: [delivererId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_attachments")
}
